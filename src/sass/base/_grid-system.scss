/**
 *  Containers
 */

.container,
.container-fluid {
	box-sizing: border-box;
	width: 100%;
	padding-right: ($grid_gutter / 2);
	padding-left: ($grid_gutter / 2);
	margin-right: auto;
	margin-left: auto;
}

.container {
	@each $breakpoint, $max_width in $container_max_widths {
		@media (min-width: #{$breakpoint}) {
			max-width: #{$max_width};
		}
	}
}

/**
	*  Rows
	*/

.row {
	display: flex;
	flex-direction: row;
	box-sizing: border-box;
	margin-right: -$grid_gutter / 2;
	margin-left: -$grid_gutter / 2;
	flex: 0 1 auto;
	flex-wrap: wrap;
}

/**
	* Columns
	*/

[class^='col-'],
[class*=' col-'] {
	display: flex;
	flex: 0 0 auto;
	position: relative;
	box-sizing: border-box;
	padding-right: $grid_gutter / 2;
	padding-left: $grid_gutter / 2;
}

@each $breakpoint, $width in $breakpoints_min {
	@media (min-width: $width) {
		@for $i from 1 through $grid_columns {
			.col-#{$breakpoint}-#{$i} {
				width: percentage($i / $grid_columns);
			}
		}
	}
}

/**
	* Offsets
	*/

@each $breakpoint, $width in $breakpoints_min {
	@media (min-width: $width) {
		@for $i from 1 through $grid_columns {
			.col-#{$breakpoint}-offset-#{$i} {
				margin-left: percentage($i / $grid_columns);
			}
		}
	}
}

/**
	* Hide
	*/

@for $i from 1 through length($breakpoints_max) {
	@if ($i < length($breakpoints_max)) {
		@media (max-width: nth( map-values($breakpoints_max), $i )) {
			.hide-#{nth( map-keys($breakpoints_max), $i )} {
				display: none;
			}
		}
	} @else {
		.hide {
			display: none;
		}
	}
}
